// Как получить последний элемент из произвольного массива?

// У нас есть массив goods. Сколько в нем элементов – не знаем, но можем прочитать из goods.length.

//  Напишите код для получения последнего элемента goods.

 // ..................................................................................................

 // var goods = ['1','2','5', 'knasd', 'lakjd', '773ha', 'jasdk', 'Оце козак!'];



// alert(goods[goods.length - 1]);

 // ...................................................................................................

// Как добавить элемент в конец произвольного массива?

// У нас есть массив goods. Напишите код для добавления в его конец значения «Компьютер».

// ...................................................................................................

// // var goods = ['1','2','5', 'knasd', 'lakjd', '773ha', 'jasdk', 'Оце козак!'];

// // goods.push('Компьютер');

// // alert(goods[goods.length - 1]);

// .........................................................................................................

// Задача из 5 шагов-строк:

// Создайте массив styles с элементами «Джаз», «Блюз».
// Добавьте в конец значение «Рок-н-Ролл»
// Замените предпоследнее значение с конца на «Классика». Код замены предпоследнего значения должен работать для массивов любой длины.
// Удалите первое значение массива и выведите его alert.
// Добавьте в начало значения «Рэп» и «Регги».
// Массив в результате каждого шага:

// Джаз, Блюз
// Джаз, Блюз, Рок-н-Ролл
// Джаз, Классика, Рок-н-Ролл
// Классика, Рок-н-Ролл
// Рэп, Регги, Классика, Рок-н-Ролл

// .........................................................................................................

// var styles = ['Джаз', 'Блюз'];
// styles.push('Рок-н-Ролл');
// styles[styles.length - 2] = 'Классика';
// styles.shift([1]);
// styles.unshift('Рэп', 'Регги');


// alert(styles);
// alert(styles.length);
// .........................................................................................................
// 

// Напишите код, который:

// Запрашивает по очереди значения при помощи prompt и сохраняет их в массиве.
// Заканчивает ввод, как только посетитель введёт пустую строку, не число или нажмёт «Отмена».
// При этом ноль 0 не должен заканчивать ввод, это разрешённое число.
// Выводит сумму всех значений массива

// .........................................................................................................

// var numbers = [];

// while (true) {
// 	var number = prompt("Вводи значения которые нужно добаять", 0);

// 	 if (number === "" || number === null || isNaN(number) ) break;

// 	numbers.push(+number);

	
// }
// var sum = 0;
// for (var i = 0; i < numbers.length; i++){
// 	 sum += numbers[i];
// }

// alert(sum);
// .........................................................................................................

// Создайте функцию find(arr, value), которая ищет в массиве arr значение value и возвращает его номер, если найдено, или -1, если не найдено.

// Например:

// arr = ["test", 2, 1.5, false];

// find(arr, "test"); // 0
// find(arr, 2); // 1
// find(arr, 1.5); // 2

// find(arr, 0); // -1


// .........................................................................................................
	
	// arr = ["test", 2, 1.5, false];

	// function find (arr, value) {
	// 	for (i = 0; i < arr.length; i++){
	// 		if (arr[i] == value) return i;
	// 	}

	// 	return -1;
	// }

	// document.write(find(arr,1.5));

// .........................................................................................................
// Создайте функцию filterRange(arr, a, b), которая принимает массив чисел arr и возвращает 
// новый массив, который содержит только числа из arr из диапазона от a до b. То есть, 
// проверка имеет вид a ≤ arr[i] ≤ b. Функция не должна менять arr.

// Пример работы:

// var arr = [5, 4, 3, 8, 0];

// var filtered = filterRange(arr, 3, 5);
// теперь filtered = [5, 4, 3]
// arr не изменился


// .........................................................................................................
	// var arr = [5, 4, 3, 8, 0, 20, 2, 3, 4, ,88];
	
	// function filterRange(arr, a, b) {
	// 	var newarr = [];

	// 	for (i = 0;  i < arr.length; i++){
	// 		if ( arr[i] >= a && arr[i] <= b){
	// 			newarr.push(arr[i]);
	// 		}
	// 	}
	// 	return newarr;
	// } 

	// var filtred = filterRange(arr, 2, 7);
	// alert(filtred);
	






// .........................................................................................................
// Древний алгоритм «Решето Эратосфена» для поиска всех простых чисел до n выглядит так:

// Создать список последовательных чисел от 2 до n: 2, 3, 4, ..., n.
// Пусть p=2, это первое простое число.
// Зачеркнуть все последующие числа в списке с разницей в p, т.е. 2*p, 3*p, 4*p и т.д. В случае p=2 это будут 4,6,8....
// Поменять значение p на первое не зачеркнутое число после p.
// Повторить шаги 3-4 пока p2 < n.
// Все оставшиеся не зачеркнутыми числа – простые.
// Посмотрите также анимацию алгоритма.

// Реализуйте «Решето Эратосфена» в JavaScript, используя массив.

// Найдите все простые числа до 100 и выведите их сумму.

// .........................................................................................................
	var prost = [];
	
	for (i=2; i <= 100; i++){
		prost.push(i);
	}

	for (i=0; i <= prost.length; i++){
		prost.pop(3 * i);
		
	}

	document.write(prost);



// .........................................................................................................


// .........................................................................................................

// .........................................................................................................


// .........................................................................................................


// .........................................................................................................


// .........................................................................................................


// .........................................................................................................


// .........................................................................................................