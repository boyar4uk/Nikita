

// Напишите функцию checkSpam(str), которая возвращает true,
// если строка str содержит „viagra“ или „XXX“, а иначе false.

// Функция должна быть нечувствительна к регистру:

// checkSpam('buy ViAgRA now') == true
// checkSpam('free xxxxx') == true
// checkSpam("innocent rabbit") == false



// Создайте функцию truncate(str, maxlength), которая проверяет длину строки str,
//  и если она превосходит maxlength – заменяет конец str на "...", так чтобы ее длина стала равна maxlength.

// Результатом функции должна быть (при необходимости) усечённая строка.

// Например:

// truncate("Вот, что мне хотелось бы сказать на эту тему:", 20) = "Вот, что мне хоте..."

// truncate("Всем привет!", 20) = "Всем привет!"
// Эта функция имеет применение в жизни. Она используется, чтобы усекать слишком длинные темы сообщений.

// P.S. В кодировке Unicode существует специальный символ «троеточие»: … (HTML: &hellip;), 
// но в этой задаче подразумеваются именно три точки подряд.

// Мини-задача на синтаксис объектов. Напишите код, по строке на каждое действие.

// Создайте пустой объект user.
// Добавьте свойство name со значением Вася.
// Добавьте свойство surname со значением Петров.
// Поменяйте значение name на Сергей.
// Удалите свойство name из объекта.
// 
// 3
// -14
// -5

// Как в функции отличить отсутствующий аргумент от undefined?

// Напишите функцию sum(...), которая возвращает сумму всех своих аргументов:

// sum() = 0
// sum(1) = 1
// sum(1, 2) = 3
// sum(1, 2, 3) = 6
// sum(1, 2, 3, 4) = 10

// Как получить последний элемент из произвольного массива?

// У нас есть массив goods. Сколько в нем элементов – не знаем, но можем прочитать из goods.length.

// Напишите код для получения последнего элемента goods.

// var arr = [1,4,5,6,7,84,333,3];

// var last = arr.length;

// alert(last);
// alert(arr[arr.length - 1]);

// Как добавить элемент в конец произвольного массива?

// У нас есть массив goods. Напишите код для добавления в его конец значения «Компьютер

// var goods = [1,3,4,5];
// 	goods.push('компьютер');

// alert(goods[goods.length - 1]);	

// Задача из 5 шагов-строк:

// Создайте массив styles с элементами «Джаз», «Блюз».
// Добавьте в конец значение «Рок-н-Ролл»
// Замените предпоследнее значение с конца на «Классика».
// Код замены предпоследнего значения должен работать для массивов любой длины.
// Удалите первое значение массива и выведите его alert.
// Добавьте в начало значения «Рэп» и «Регги».
// Массив в результате каждого шага:
	// Джаз, Блюз
	// Джаз, Блюз, Рок-н-Ролл
	// Джаз, Классика, Рок-н-Ролл
	// Классика, Рок-н-Ролл
	// Рэп, Регги, Классика, Рок-н-Ролл



// var styles = ['Джас', 'Блюз'];

// 	styles.push('Рок - н - Ролл');

// 	styles[styles.length - 2] = 'Классика';

	
// 	alert(styles.shift());

// 		styles.unshift(['Рэп', 'Регги']);
// 		alert(styles);

// Напишите код для вывода alert случайного значения из массива:

// var arr = ["Яблоко", "Апельсин", "Груша", "Лимон"];
// P.S. Код для генерации случайного целого от min to max включительно:

// var rand = min + Math.floor(Math.random() * (max + 1 - min));
// решение

// var arr = ["Яблоко", "Апельсин", "Груша", "Лимон"];

// alert(arr[Math.floor(Math.random()*arr.length)]);

// Напишите код, который:

// Запрашивает по очереди значения при помощи prompt и сохраняет их в массиве.
// Заканчивает ввод, как только посетитель введёт пустую строку, не число или нажмёт «Отмена».
// При этом ноль 0 не должен заканчивать ввод, это разрешённое число.
// Выводит сумму всех значений массива


// var arr = [];


// while (true){
// 	var number = prompt('Введи войска', 0);
// 	if (number === "" || number === null || isNaN(number) ) break;
	
// 	arr.push(+number);
// } 


// var sum = 0;
// for ( i = 0; i < arr.length; i ++ ){
// 	sum += arr[i];
// }

// alert(sum);

// Создайте функцию find(arr, value), которая ищет в массиве arr значение value и возвращает его номер,
//  если найдено, или -1, если не найдено.

// Например:

// arr = ["test", 2, 1.5, false];

// find(arr, "test"); // 0
// find(arr, 2); // 1
// find(arr, 1.5); // 2

// find(arr, 0); // -1

// arr = ["test", 2, 1.5, false];


// function find (arr, value) {

// 	for (var i = 0; i < arr.length; i++) {
// 	if (arr[i] == value ) return i;


// 	}
//  	return -1;
// }

// alert(find(arr, false));

// Создайте функцию filterRange(arr, a, b), 
// которая принимает массив чисел arr и возвращает новый массив,
//  который содержит только числа из arr из диапазона от a до b. То есть, 
//  проверка имеет вид a ≤ arr[i] ≤ b. Функция не должна менять arr.

// Пример работы:

// var arr = [5, 4, 3, 8, 0];

// var filtered = filterRange(arr, 3, 5);
// // теперь filtered = [5, 4, 3]
// // arr не изменился


// var arr1 = [1,2,3,4,5,22,3,333,44,4,4,4,55,5,5];

// function filterRange (arr, a, b) {
// 	var arr2 = [];

// 	for (var i = 0; i < arr.length; i++) {
// 		if (arr[i] >= a && arr[i] =< b ){
// 			arr2.push(arr[i]);
// 		}
// 	}
// 	alert(arr2);
// }

// filterRange(arr1, 9,500);

// Код ниже получает из массива строк новый массив, содержащий их длины:

// var arr = ["Есть", "жизнь", "на", "Марсе"];

// var arrLength = [];
// for (var i = 0; i < arr.length; i++) {
//   arrLength[i] = arr[i].length;
// }

// alert( arrLength ); // 4,5,2,5
// Перепишите выделенный участок: уберите цикл, используйте вместо него метод map.


// var arr = ["Есть", "жизнь", "на", "Марсе"];

// var newArr = arr.map(function(name){
// 	return name.length;
// })

// alert(newArr);




// На входе массив чисел, например: arr = [1,2,3,4,5].

// Напишите функцию getSums(arr), которая возвращает массив его частичных сумм.

// Иначе говоря, вызов getSums(arr) должен возвращать новый массив из такого же числа элементов,
//  в котором на каждой позиции должна быть сумма элементов arr до этой позиции включительно.

// То есть:

// для arr = [ 1, 2, 3, 4, 5 ]
// getSums( arr ) = [ 1, 1+2, 1+2+3, 1+2+3+4, 1+2+3+4+5 ] = [ 1, 3, 6, 10, 15 ]
// Еще пример: getSums([-2,-1,0,1]) = [-2,-3,-3,-2].

// Функция не должна модифицировать входной массив.
// В решении используйте метод arr.reduce.



//    На входе массив чисел, например: arr = [1,2,3,4,5].

// Напишите функцию getSums(arr), которая возвращает массив его частичных сумм.

// Иначе говоря, вызов getSums(arr) должен возвращать новый массив из такого же числа элементов, 
// в котором на каждой позиции должна быть сумма элементов arr до этой позиции включительно.

// То есть:

// для arr = [ 1, 2, 3, 4, 5 ]
// getSums( arr ) = [ 1, 1+2, 1+2+3, 1+2+3+4, 1+2+3+4+5 ] = [ 1, 3, 6, 10, 15 ]
// Еще пример: getSums([-2,-1,0,1]) = [-2,-3,-3,-2].

// Функция не должна модифицировать входной массив.
// В решении используйте метод arr.reduce.
// Открыть песочницу с тестами для задачи.

// Мини-задача на синтаксис объектов. Напишите код, по строке на каждое действие.

// Создайте пустой объект user.
// Добавьте свойство name со значением Вася.
// Добавьте свойство surname со значением Петров.
// Поменяйте значение name на Сергей.
// Удалите свойство name из объекта.

// Создайте функцию multiplyNumeric, которая получает объект и умножает все численные свойства на 2. Например:

// // до вызова


var user = {
	age: 25,
	date: 25,
	sum: function(){
		console.log (25 + 23);
	} 
}

for (key in user){
	console.log(user[key]);
}